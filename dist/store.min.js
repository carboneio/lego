class t{constructor(t={}){this.__state=t,this.subscribers=[]}subscribe(t,s=[]){const e=Array.isArray(s)?s:Object.keys(s);t.setState(this.getSelectedState(e)),this.subscribers.push({target:t,props:e}),t.__stores.push(this)}unsubscribe(t){const s=[];for(let e=0;e<this.subscribers.length;e++){const r=this.subscribers[e];r.target!==t&&s.push(r)}this.subscribers=s}get state(){return this.__state}setState(t){this.__state={...this.state,...t},this.notify(t)}getSelectedState(t){return t.reduce(((t,s)=>(s in this.state&&(t[s]=this.state[s]),t)),{})}updateSelectedState(t,s){const e={};let r=0;for(var i=0;i<s.length;i++){const a=s[i];void 0!==t&&void 0===t[a]||(e[a]=this.state[a],r|=1)}return 1===r?e:null}notify(t){this.subscribers.forEach((({target:s,props:e})=>{const r=this.updateSelectedState(t,e);null!==r&&s.render(r)}))}}export{t as default};
